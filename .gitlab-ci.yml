stages:
  - preparation
  - test
  - build
  - deploy

variables:
  IMAGE_REGISTRY: registry.gitlab.com/dewadg/synchrome-api
  CONTAINER_NAME: synchrome-api

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/

run_composer_install:
  stage: preparation
  image: composer
  before_script:
    - composer -v
  script:
    - composer install
  after_script:
    - composer dump-autoload

run_unit_tests:
  stage: test
  image: php:7.2-alpine
  variables:
    APP_ENV: $TEST_APP_ENV
    APP_DEBUG: $TEST_APP_DEBUG
    APP_KEY: $TEST_APP_KEY
    APP_TIMEZONE: $TEST_APP_TIMEZONE
    DB_CONNECTION: $TEST_DB_CONNECTION
    DB_HOST: $TEST_DB_HOST
    DB_DATABASE: $TEST_DB_DATABASE
    DB_USERNAME: $TEST_DB_USERNAME
    DB_PASSWORD: $TEST_DB_PASSWORD
    LOG_CHANNEL: $TEST_LOG_CHANNEL
    CACHE_DRIVER: $TEST_CACHE_DRIVER
    QUEUE_DRIVER: $TEST_QUEUE_DRIVER
    ACCESS_TOKEN_AGE: $TEST_ACCESS_TOKEN_AGE
  before_script:
    - docker-php-ext-install pdo pdo_mysql
  script:
    - php artisan migrate:fresh --seed
    - vendor/bin/phpunit

generate_image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t $IMAGE_REGISTRY:latest .
    - docker push $IMAGE_REGISTRY:latest

deploy:
  stage: deploy
  image: ubuntu
  variables:
    APP_ENV: $PROD_APP_ENV
    APP_DEBUG: $PROD_APP_DEBUG
    APP_KEY: $PROD_APP_KEY
    APP_TIMEZONE: $PROD_APP_TIMEZONE
    DB_CONNECTION: $PROD_DB_CONNECTION
    DB_HOST: $PROD_DB_HOST
    DB_DATABASE: $PROD_DB_DATABASE
    DB_USERNAME: $PROD_DB_USERNAME
    DB_PASSWORD: $PROD_DB_PASSWORD
    LOG_CHANNEL: $PROD_LOG_CHANNEL
    CACHE_DRIVER: $PROD_CACHE_DRIVER
    QUEUE_DRIVER: $PROD_QUEUE_DRIVER
    ACCESS_TOKEN_AGE: $PROD_ACCESS_TOKEN_AGE
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$PROD_SERVER_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PROD_SERVER_ADDRESS >> ~/.ssh/known_hosts
  script:
    - |
      ssh $PROD_SERVER_USER@$PROD_SERVER_ADDRESS "
        docker pull $IMAGE_REGISTRY:latest;
        if [ "$(docker ps -aqf name=$CONTAINER_NAME)" ]; then \
          echo 'Removing existing $CONTAINER_NAME container';
          docker rm -f $CONTAINER_NAME;
        else \
          echo 'No $CONTAINER_NAME container exists';
        fi;
        docker create \
          --name $CONTAINER_NAME \
          -p 8000:80 \
          -e APP_ENV=$APP_ENV \
          -e APP_DEBUG=$APP_DEBUG \
          -e APP_KEY=$APP_KEY \
          -e APP_TIMEZONE=$APP_TIMEZONE \
          -e DB_CONNECTION=$DB_CONNECTION \
          -e DB_HOST=$DB_HOST \
          -e DB_DATABASE=$DB_DATABASE \
          -e DB_USERNAME=$DB_USERNAME \
          -e DB_PASSWORD=$DB_PASSWORD \
          -e LOG_CHANNEL=$LOG_CHANNEL \
          -e CACHE_DRIVER=$CACHE_DRIVER \
          -e QUEUE_DRIVER=$QUEUE_DRIVER \
          -e ACCESS_TOKEN_AGE=$ACCESS_TOKEN_AGE \
          --network synchrome_net \
          $IMAGE_REGISTRY;
        docker start $CONTAINER_NAME;
      "
